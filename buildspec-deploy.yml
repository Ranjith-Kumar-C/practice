version: 0.2

env:
  variables:
    REGION: "us-east-1"
    APP_ID: "d133vxv6yy7vaa"
    BRANCH: "staging"
    # Override these via CodeBuild env vars if needed
    S3_BUCKET: "amplify-poc-09092025"
    ARTIFACT_PREFIX: "artifacts/"

phases:
  install:
    runtime-versions:
      python: "3.11"
    commands:
      - echo "Install - ensure aws cli present"
      - pip install --upgrade awscli || true
      - if ! command -v jq >/dev/null 2>&1; then echo "jq not found; attempting to install via apt-get (may fail on some images)..."; if command -v apt-get >/dev/null 2>&1; then sudo apt-get update && sudo apt-get install -y jq || true; fi; fi

  pre_build:
    commands:
      - echo "Reading artifact-info.json"
      - |
        if [ -f artifact-info.json ]; then
          ARTIFACT_KEY=$(jq -r .artifact_key artifact-info.json)
          S3_BUCKET=$(jq -r .s3_bucket artifact-info.json)
        elif [ -n "$ARTIFACT_KEY" ] && [ -n "$S3_BUCKET" ]; then
          echo "Using env-provided artifact variables"
        elif [ -n "$S3_BUCKET" ]; then
          echo "Deriving latest artifact key from s3://${S3_BUCKET}/${ARTIFACT_PREFIX}"
          ARTIFACT_KEY=$(aws s3api list-objects-v2 --bucket "$S3_BUCKET" --prefix "$ARTIFACT_PREFIX" --query 'reverse(sort_by(Contents,&LastModified))|[0].Key' --output text)
          if [ -z "$ARTIFACT_KEY" ] || [ "$ARTIFACT_KEY" = "None" ]; then
            echo "No artifacts found under prefix ${ARTIFACT_PREFIX} in bucket ${S3_BUCKET}"
            exit 1
          fi
        else
          echo "Missing artifact-info.json and ARTIFACT_KEY/S3_BUCKET env"
          exit 1
        fi
      - echo "Artifact key - ${ARTIFACT_KEY}"
      - echo "S3 bucket - ${S3_BUCKET}"
      - PRESIGNED_URL=$(aws s3 presign "s3://${S3_BUCKET}/${ARTIFACT_KEY}" --expires-in 3600)
      - echo "Generated presigned URL"; printf "%s" "$PRESIGNED_URL" > source-url.txt

  build:
    commands:
      - echo "Calling aws amplify start-deployment..."
      - aws amplify start-deployment --app-id "${APP_ID}" --branch-name "${BRANCH}" --source-url file://source-url.txt > start-deploy-output.json
      - cat start-deploy-output.json
      - JOB_ID=$(jq -r '.jobSummary.jobId // .jobId // empty' start-deploy-output.json)
      - if [ -z "$JOB_ID" ]; then echo "Failed to obtain job id from start-deploy-output.json"; exit 1; fi
      - echo "Polling Amplify job - ${JOB_ID}"; n=0; STATUS=""; until [ "$STATUS" = "SUCCEED" ] || [ "$STATUS" = "FAILED" ] || [ $n -ge 40 ]; do STATUS_JSON=$(aws amplify get-job --app-id "${APP_ID}" --branch-name "${BRANCH}" --job-id "${JOB_ID}"); STATUS=$(echo "$STATUS_JSON" | jq -r '.job.summary.status' || echo "UNKNOWN"); echo "Attempt $n - status=$STATUS"; if [ "$STATUS" = "SUCCEED" ] || [ "$STATUS" = "FAILED" ]; then break; fi; n=$((n+1)); sleep 10; done
      - if [ "$STATUS" != "SUCCEED" ]; then echo "Deployment finished with non-success status - $STATUS"; echo "$STATUS_JSON"; exit 1; fi
      - echo "Amplify deployment succeeded."

artifacts:
  files:
    - start-deploy-output.json